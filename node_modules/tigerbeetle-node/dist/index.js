"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.id = exports.createClient = exports.amount_max = void 0;
__exportStar(require("./bindings"), exports);
const bindings_1 = require("./bindings");
const node_crypto_1 = require("node:crypto");
const binding = (() => {
    const { arch, platform } = process;
    const archMap = {
        "arm64": "aarch64",
        "x64": "x86_64"
    };
    const platformMap = {
        "linux": "linux",
        "darwin": "macos",
        "win32": "windows",
    };
    if (!(arch in archMap)) {
        throw new Error(`Unsupported arch: ${arch}`);
    }
    if (!(platform in platformMap)) {
        throw new Error(`Unsupported platform: ${platform}`);
    }
    let extra = '';
    const fs = require('fs');
    const path = require('path');
    if (platform === 'linux') {
        extra = '-gnu';
        for (const file of fs.readdirSync("/proc/self/map_files/")) {
            const realPath = fs.readlinkSync(path.join("/proc/self/map_files/", file));
            if (realPath.includes('musl')) {
                extra = '-musl';
                break;
            }
        }
    }
    const filename = `./bin/${archMap[arch]}-${platformMap[platform]}${extra}/client.node`;
    return require(filename);
})();
exports.amount_max = (2n ** 128n) - 1n;
function createClient(args) {
    let context = binding.init({
        cluster_id: args.cluster_id,
        replica_addresses: Buffer.from(args.replica_addresses.join(',')),
    });
    const destroy = () => {
        if (context)
            binding.deinit(context);
        context = null;
    };
    const request = (operation, batch) => {
        return new Promise((resolve, reject) => {
            try {
                if (!context)
                    throw new Error('Client was shutdown.');
                binding.submit(context, operation, batch, (error, result) => {
                    if (error) {
                        reject(error);
                    }
                    else if (result) {
                        resolve(result);
                    }
                    else {
                        throw new Error("UB: Binding invoked callback without error or result");
                    }
                });
            }
            catch (err) {
                reject(err);
            }
        });
    };
    return {
        createAccounts(batch) { return request(bindings_1.Operation.create_accounts, batch); },
        createTransfers(batch) { return request(bindings_1.Operation.create_transfers, batch); },
        lookupAccounts(batch) { return request(bindings_1.Operation.lookup_accounts, batch); },
        lookupTransfers(batch) { return request(bindings_1.Operation.lookup_transfers, batch); },
        getAccountTransfers(filter) { return request(bindings_1.Operation.get_account_transfers, [filter]); },
        getAccountBalances(filter) { return request(bindings_1.Operation.get_account_balances, [filter]); },
        queryAccounts(filter) { return request(bindings_1.Operation.query_accounts, [filter]); },
        queryTransfers(filter) { return request(bindings_1.Operation.query_transfers, [filter]); },
        destroy,
    };
}
exports.createClient = createClient;
let idLastTimestamp = 0;
let idLastBuffer = new DataView(new ArrayBuffer(16));
function id() {
    let timestamp = Date.now();
    if (timestamp <= idLastTimestamp) {
        timestamp = idLastTimestamp;
    }
    else {
        idLastTimestamp = timestamp;
        (0, node_crypto_1.randomFillSync)(idLastBuffer);
    }
    const littleEndian = true;
    const randomLo32 = idLastBuffer.getUint32(0, littleEndian) + 1;
    const randomHi32 = idLastBuffer.getUint32(4, littleEndian) + (randomLo32 > 0xFFFFFFFF ? 1 : 0);
    const randomHi16 = idLastBuffer.getUint16(8, littleEndian) + (randomHi32 > 0xFFFFFFFF ? 1 : 0);
    if (randomHi16 > 0xFFFF) {
        throw new Error('random bits overflow on monotonic increment');
    }
    idLastBuffer.setUint32(0, randomLo32 & 0xFFFFFFFF, littleEndian);
    idLastBuffer.setUint32(4, randomHi32 & 0xFFFFFFFF, littleEndian);
    idLastBuffer.setUint16(8, randomHi16, littleEndian);
    idLastBuffer.setUint16(10, timestamp & 0xFFFF, littleEndian);
    idLastBuffer.setUint32(12, (timestamp >>> 16) & 0xFFFFFFFF, littleEndian);
    const lo = idLastBuffer.getBigUint64(0, littleEndian);
    const hi = idLastBuffer.getBigUint64(8, littleEndian);
    return (hi << 64n) | lo;
}
exports.id = id;
//# sourceMappingURL=index.js.map